stmt {
 program = sexp+
 sexp = applySyntactic<List> | atom

  atom =
    | "#f" -- false
    | "#t" -- true
    | integer -- int
    | string -- string
    | symbol -- symbol

  integer = digit+
  string = "\"" (~"\"" any)* "\""
  symbol = symChar+
  symChar = ~specialChar  any
  specialChar = ";" | "#" | "(" | ")" | "'" | bq | comma | "." | space

  List =
    | "(" ")" -- nil
    | "(" "define" atom Expr ")" -- defvar
    | "(" "define" "(" fname formal* ")" Body ")" -- defun
    | "(" "cond" CondClause+ ")" -- cond
    | "(" "let" symbol "(" Binding+ ")" Body ")" -- namedlet
    | "(" "let*" "(" Binding+ ")" Body ")" -- letstar
    | "(" "let" "(" Binding+ ")" Body ")" -- let
    | "'" sexp -- quoted
    | bq sexp -- backquoted
    | comma sexp -- commaexpanded
    | "(" sexp+ Dotted ")" -- dotted
    | "(" sexp+ ")" -- list

  fname = symbol
  formal = symbol
  Expr = #sexp

  Body = BodyExpr+
  BodyExpr = #sexp

  CondClause = "(" Guard Body ")"
  Guard = sexp

  Binding = "(" atom Expr ")"
  
  Dotted = "." sexp

  bq = "`"
  comma = ","

  comment = ";" (~"\n" any)* "\n"
  space += comment
}
