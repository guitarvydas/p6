function ftry (db, g, r, e, n) {
    PUSH ();
    SET (display (SET (" *** enter try")));
    SET (newline ());
    SET (display (SET (g)));
    SET (newline ());
    SET (display (SET (r)));
    SET (newline ());

    PUSH ();
    if (SET (null_Q (SET (r)))) {
	SET (false)
    }
    else {

	PUSH ();

	let a = SET (copy (SET (car (SET (r))), SET (list (SET (n)))));
	let ne = SET (unify (SET (car (SET (g))), SET (car (SET (a))), SET (e)));PUSH ();
	if (SET (ne)) {
	    SET (prove3 (SET (db), SET (append (SET (cdr (SET (a))), SET (cdr (SET (g))))), SET (ne), SET (SET (1) + SET (n))))
	}
	MERGE ();;
	SET (ftry (SET (db), SET (g), SET (cdr (SET (r))), SET (e), SET (n)));
	MERGE ();
    }
    MERGE ();
    return POP ();
}
function prove3 (db, g, e, n) {
    PUSH ();
    SET (display (SET ("** enter prove3")));
    SET (newline ());
    SET (display (SET (g)));
    SET (newline ());
    SET (display (SET (e)));
    SET (newline ());

    PUSH ();
    if (false) {
    }
    else if (SET (null_Q (SET (g)))) {
	SET (display (SET ("** prove3 calling print-frame")));
	SET (newline ());
	SET (display (SET (e)));
	SET (newline ());
	SET (print__frame (SET (e)));
    }
    else {
	SET (ftry (SET (db), SET (g), SET (db), SET (e), SET (n)));
    }
    MERGE ();;
    return POP ();
}
let link = list;
let L_l = car;
let L_g = cadr;
let L_r = caddr;
let L_e = cadddr;
function L_n (x) {
    PUSH ();
    SET (car (SET (cddddr (SET (x)))));
    return POP ();
}
function back5 (db, l, g, r, e, n) {
    PUSH ();

    PUSH ();
    if (SET (SET (pair_Q (SET (g))) && SET (pair_Q (SET (r))))) {
	SET (prove5 (SET (db), SET (l), SET (g), SET (cdr (SET (r))), SET (e), SET (n)))
    }
    else {
	SET (prove5 (SET (db), SET (L_l (SET (l))), SET (L_g (SET (l))), SET (cdr (SET (L_r (SET (l))))), SET (L_e (SET (l))), SET (L_n (SET (l)))))
    }
    MERGE ();
    return POP ();
}
function prove5 (db, l, g, r, e, n) {
    PUSH ();

    PUSH ();
    if (false) {
    }
    else if (SET (null_Q (SET (g)))) {
	SET (print__frame (SET (e)));
	SET (back5 (SET (db), SET (l), SET (g), SET (r), SET (e), SET (n)));
    }
    else if (SET (null_Q (SET (r)))) {

	PUSH ();
	if (SET (null_Q (SET (l)))) {
	    SET (true)
	}
	else {
	    SET (back5 (SET (db), SET (l), SET (g), SET (r), SET (e), SET (n)))
	}
	MERGE ();
    }
    else {

	PUSH ();

	let a = SET (copy (SET (car (SET (r))), SET (n)));
	let e_A = SET (unify (SET (car (SET (a))), SET (car (SET (g))), SET (e)));
	PUSH ();
	if (SET (e_A)) {
	    SET (prove5 (SET (db), SET (link (SET (l), SET (g), SET (r), SET (e), SET (n))), SET (append (SET (cdr (SET (a))), SET (cdr (SET (g))))), SET (db), SET (e_A), SET (SET (1) + SET (n))))
	}
	else {
	    SET (back5 (SET (db), SET (l), SET (g), SET (r), SET (e), SET (n)))
	}
	MERGE ();
	MERGE ();;
    }
    MERGE ();;
    return POP ();
}
function L_c (x) {
    PUSH ();
    SET (cadr (SET (cddddr (SET (x)))));
    return POP ();
}
function clear_r (x) {
    PUSH ();
    SET (set__car_B (SET (cddr (SET (x))), new Pair (null, null)));
    return POP ();
}
function back6 (db, l, g, r, e, n, c) {
    PUSH ();

    PUSH ();
    if (false) {
    }
    else if (SET (SET (pair_Q (SET (g))) && SET (pair_Q (SET (r))))) {
	SET (prove6 (SET (db), SET (l), SET (g), SET (cdr (SET (r))), SET (e), SET (n), SET (c)));
    }
    else if (SET (pair_Q (SET (l)))) {
	SET (prove6 (SET (db), SET (L_l (SET (l))), SET (L_g (SET (l))), SET (cdr (SET (L_r (SET (l))))), SET (L_e (SET (l))), SET (L_n (SET (l))), SET (L_c (SET (l)))));
    }
    MERGE ();;
    return POP ();
}
function prove6 (db, l, g, r, e, n, c) {
    PUSH ();

    PUSH ();
    if (false) {
    }
    else if (SET (null_Q (SET (g)))) {
	SET (print__frame (SET (e)));
	SET (back6 (SET (db), SET (l), SET (g), SET (r), SET (e), SET (n), SET (c)));
    }
    else if (SET (eq_Q (SET ("_B"), SET (car (SET (g)))))) {
	SET (clear_r (SET (c)));
	SET (prove6 (SET (db), SET (c), SET (cdr (SET (g))), SET (r), SET (e), SET (n), SET (c)));
    }
    else if (SET (eq_Q (SET ("r_B"), SET (car (SET (g)))))) {
	SET (prove6 (SET (db), SET (l), SET (cddr (SET (g))), SET (r), SET (e), SET (n), SET (cadr (SET (g)))));
    }
    else if (SET (null_Q (SET (r)))) {

	PUSH ();
	if (SET (null_Q (SET (l)))) {
	    SET (true)
	}
	else {
	    SET (back6 (SET (db), SET (l), SET (g), SET (r), SET (e), SET (n), SET (c)))
	}
	MERGE ();
    }
    else {

	PUSH ();

	let a = SET (copy (SET (car (SET (r))), SET (n)));
	let e_A = SET (unify (SET (car (SET (a))), SET (car (SET (g))), SET (e)));
	PUSH ();
	if (SET (e_A)) {
	    SET (prove6 (SET (db), SET (link (SET (l), SET (g), SET (r), SET (e), SET (n), SET (c))), SET (append (SET (cdr (SET (a))), SET (list (SET ("r_B"), SET ("l"))), SET (cdr (SET (g))))), SET (db), SET (e_A), SET (SET (1) + SET (n)), SET (l)))
	}
	else {
	    SET (back6 (SET (db), SET (l), SET (g), SET (r), SET (e), SET (n), SET (c)))
	}
	MERGE ();
	MERGE ();;
    }
    MERGE ();;
    return POP ();
}
let empty = new Pair (new Pair (SET ("bottom"), null), null);
let vvar = SET ("_Q");
let name = cadr;
let time = cddr;
function var_Q (x) {
    PUSH ();
    SET (SET (pair_Q (SET (x))) && SET (eq_Q (SET (vvar), SET (car (SET (x))))));
    return POP ();
}
function lookup (v, e) {
    PUSH ();

    PUSH ();
    let id = SET (name (SET (v)));
    let t = SET (time (SET (v)));
    function loop (e) {
	PUSH ();

	PUSH ();
	if (false) {
	}
	else if (SET (! (SET (pair_Q (SET (caar (SET (e)))))))) {
	    SET (false);
	}
	else if (SET (SET (eq_Q (SET (id), SET (name (SET (caar (SET (e))))))) && SET (eqv_Q (SET (t), SET (time (SET (caar (SET (e))))))))) {
	    SET (car (SET (e)));
	}
	else {
	    SET (loop (SET (cdr (SET (e)))));
	}
	MERGE ();;
	MERGE ();}
    SET (loop (SET (e)));
    MERGE ();;
    return POP ();
}
function value (x, e) {
    PUSH ();

    PUSH ();
    if (SET (var_Q (SET (x)))) {

	PUSH ();
	let v = SET (lookup (SET (x), SET (e)));
	PUSH ();
	if (SET (v)) {
	    SET (value (SET (cadr (SET (v))), SET (e)))
	}
	else {
	    SET (x)
	}
	MERGE ();
	MERGE ();
    }
    else {
	SET (x)
    }
    MERGE ();
    return POP ();
}
function copy (x, n) {
    PUSH ();

    PUSH ();
    if (false) {
    }
    else if (SET (! (SET (pair_Q (SET (x)))))) {
	SET (x);
    }
    else if (SET (var_Q (SET (x)))) {
	SET (append (SET (x), SET (n)));
    }
    else {
	SET (cons (SET (copy (SET (car (SET (x))), SET (n))), SET (copy (SET (cdr (SET (x))), SET (n)))));
    }
    MERGE ();;
    return POP ();
}
function bind (x, y, e) {
    PUSH ();
    SET (cons (SET (list (SET (x), SET (y))), SET (e)));
    return POP ();
}
function unify (xx, yy, e) {
    PUSH ();

    PUSH ();
    let x = SET (value (SET (xx), SET (e)));
    let y = SET (value (SET (yy), SET (e)));
    PUSH ();
    if (false) {
    }
    else if (SET (eq_Q (SET (x), SET (y)))) {
	SET (e);
    }
    else if (SET (var_Q (SET (x)))) {
	SET (bind (SET (x), SET (y), SET (e)));
    }
    else if (SET (var_Q (SET (y)))) {
	SET (bind (SET (y), SET (x), SET (e)));
    }
    else if (SET (SET (! (SET (pair_Q (SET (x))))) || SET (! (SET (pair_Q (SET (y))))))) {
	SET (false);
    }
    else {

	PUSH ();
	let e_A = SET (unify (SET (car (SET (x))), SET (car (SET (y))), SET (e)));SET (SET (e_A) && SET (unify (SET (cdr (SET (x))), SET (cdr (SET (y))), SET (e_A))));
	MERGE ();;
    }
    MERGE ();;
    MERGE ();;
    return POP ();
}
function resolve (x, e) {
    PUSH ();

    PUSH ();
    if (false) {
    }
    else if (SET (! (SET (pair_Q (SET (x)))))) {
	SET (x);
    }
    else if (SET (var_Q (SET (x)))) {

	PUSH ();
	let v = SET (value (SET (x), SET (e)));
	PUSH ();
	if (SET (var_Q (SET (v)))) {
	    SET (v)
	}
	else {
	    SET (resolve (SET (v), SET (e)))
	}
	MERGE ();
	MERGE ();;
    }
    else {
	SET (cons (SET (resolve (SET (car (SET (x))), SET (e))), SET (resolve (SET (cdr (SET (x))), SET (e)))));
    }
    MERGE ();;
    return POP ();
}
function print__frame (e) {
    PUSH ();

    function loop (ee) {
	PUSH ();

	PUSH ();
	if (false) {
	}
	else if (SET (pair_Q (SET (cdr (SET (ee)))))) {

	    PUSH ();
	    if (false) {
	    }
	    else if (SET (null_Q (SET (time (SET (caar (SET (ee)))))))) {
		SET (display (SET (cadaar (SET (ee)))));
		SET (display (SET (" = ")));
		SET (display (SET (resolve (SET (caar (SET (ee))), SET (e)))));
		SET (newline ());
	    }
	    MERGE ();;
	    SET (loop (SET (cdr (SET (ee)))));
	}
	MERGE ();;
	MERGE ();}
    SET (loop (SET (e)));
    return POP ();
}
let db0 = new Pair (new Pair (new Pair (SET ("edge"), new Pair (SET ("a"), new Pair (SET ("b"), null))), null), new Pair (new Pair (new Pair (SET ("path"), new Pair (new Pair (SET ("_Q"), new Pair (SET ("A"), null)), new Pair (new Pair (SET ("_Q"), new Pair (SET ("B"), null)), new Pair (new Pair (new Pair (SET ("_Q"), new Pair (SET ("A"), null)), new Pair (new Pair (SET ("_Q"), new Pair (SET ("B"), null)), null)), null)))), new Pair (new Pair (SET ("edge"), new Pair (new Pair (SET ("_Q"), new Pair (SET ("A"), null)), new Pair (new Pair (SET ("_Q"), new Pair (SET ("B"), null)), null))), null)), null));
SET (display (new Pair (SET ("_Q"), new Pair (SET ("X"), null))))
SET (newline ())
SET (display (new Pair (SET ("a"), new Pair (SET ("b"), new Pair (SET ("c"), null)))))
SET (newline ())
SET (display (new Pair (SET ("x"), SET ("y"))))
SET (newline ())
let goals0 = new Pair (new Pair (SET ("path"), new Pair (SET ("a"), new Pair (SET ("b"), new Pair (new Pair (SET ("_Q"), new Pair (SET ("P"), null)), null)))), null);
SET (display (SET (goals0)))
SET (newline ())
SET (newline ())
SET (display (SET ("*** prove3 ***")))
SET (newline ())
SET (prove3 (SET (db0), SET (goals0), SET (empty), SET (1)))
SET (newline ())