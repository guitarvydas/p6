% rewrite tojs {
  Program [es+] = ‛«es»’
  TopLevelSexpr_special [e] = ‛«e»’
  TopLevelSexpr_listConstant [e] = ‛«e»’
  TopLevelSexpr_atom [e] = ‛«e»’
  TopLevelSexpr_call [e] = ‛\n«e»’
  Sexpr[e] = ‛«e»’

  Special_functionDefinition [lp _define lp2 name formals* rp2 Body rp] = ‛
function «name» («formals») {\nPUSH ();\n«Body»
return POP ();
}’

  Special_functionEquivalence [lp _define name name2 rp] = ‛\nlet «name» = «name2»;’
  Special_global [lp _define name BodyItem rp] = ‛\nlet «name» = «BodyItem»;’
  Special_cond [lp _cond CondClause+ ElseClause? rp] = ‛PUSH ();\nif (false) {\n}«CondClause»«ElseClause»\nMERGE ();’
  Special_ifThenElse [lp _if Guard ThenExpr ElseExpr rp] = ‛PUSH ();\nif («Guard») {\n«ThenExpr»\n}\nelse {\n«ElseExpr»\n}\nMERGE ()’
  Special_ifThen [lp _if Guard ThenExpr rp] = ‛PUSH ();\nif («Guard») {\n«ThenExpr»\n}\nMERGE ();’
  Special_and [lp _and AndBody rp] = ‛SET («AndBody»)’
  Special_or [lp _or OrBody rp] = ‛SET («OrBody»)’
  Special_letAsterisk [lp _let Bindings Body rp] = ‛PUSH ();\n«Bindings»«Body»\nMERGE ();’
  Special_letLoop [lp _let symbol NamedLetParameter Body rp] = 
    ‛function loop (⎨firstPart ‛«NamedLetParameter»’⎬) {PUSH ();\n«Body»\nMERGE ();}\nSET (loop (⎨secondPart ‛«NamedLetParameter»’⎬))’
  Special_let [lp _let Bindings Body rp] = ‛PUSH ();«Bindings»«Body»\nMERGE ();’
  Special_quote [lp _quote e rp] = ‛SET ("«e»")’
  Special_plus [lp _plus es rp] = ‛SET («es»)’

  Sexprs_multiple [e es] = ‛«e»;\n«es»’
  Sexprs_single [e] = ‛«e»;’
  PlusSexprs_multiple [e es] = ‛«e» + «es»’
  PlusSexprs_single [e] = ‛«e»’
  AndSexprs_multiple [e es] = ‛«e» && «es»’
  AndSexprs_single [e] = ‛«e»’
  OrSexprs_multiple [e es] = ‛«e» || «es»’
  OrSexprs_single [e] = ‛«e»’
  Formal [sym] = ‛«sym»’
  Guard [e] = ‛«e»’
  ThenExpr [e] = ‛«e»’
  ElseExpr [e] = ‛«e»’
  CondClause [lp e es rp] = ‛\nelse if («e») {\n«es»\n}’
  ElseClause [lp _else es rp] = ‛\nelse {\n«es»\n}’
  Bindings [lp Binding+ rp] = ‛«Binding»’
  Binding [lp symbol BodyItem rp] = ‛\nlet «symbol» = «BodyItem»;’
  NamedLetBindings [lp lp2 v e rp2 rp] = ‛«v»~«e»’

  ListConstant_dottedMultiple [lb h ts _dot e rp] = ‛new Pair (new Pair («h», «ts»), «e»)’
  ListConstant_dottedSingle [lb h _dot e rp] = ‛new Pair («h», «e»)’
  ListConstant_multiple [lb h ts rb] = ‛new Pair («h», «ts»)’
  ListConstant_single [lb e rb] = ‛new Pair («e», null)’
  ListConstant_nil [lb rb] = ‛null’

  HeadElement [e] = ‛«e»’
  TailElements_multiple [e ts] = ‛new Pair («e», «ts»)’
  TailElements_single [e] = ‛new Pair («e», null)’

  atom_nil [lp rp] = ‛SET (null)’
  atom_false [_f] = ‛SET (false)’
  atom_true [_t] = ‛SET (true)’
  atom_integerConstant [lb i rb] = ‛SET («i»)’
  atom_stringConstant [lb s rb] = ‛SET («s»)’
  atom_symbolConstant [lb symbol rb] = ‛SET ("«symbol»")’
  atom_variable [s] = ‛SET («s»)’

  integer [d+] = ‛«d»’
  string [lq cs* rq] = ‛«lq»«cs»«rq»’
  symbol [id _dot* id2*] = ‛«id»«_dot»«id2»’
  id_try [x] = ‛ftry’
  id_var [x] = ‛vvar’
  id_not [x] = ‛!’
  id_other [c cs*] = ‛«c»«cs»’
  firstLetter [c] = ‛«c»’
  followLetter [c] = ‛«c»’
  jsletter_asterisk [c] = ‛_A’
  jsletter_bang [c] = ‛_B’
  jsletter_questionMark [c] = ‛_Q’
  jsletter_dash [c] = ‛__’
  jsletter_other [c] = ‛«c»’
  special [c] = ‛«c»’
  unprintable [c] = ‛«c»’
  separator [c] = ‛«c»’

  FunctionCall [lp sym args? rp] = ‛«sym» («args»)’
  Args_multiple [e args] = ‛«e», «args»’
  Args_single [e] = ‛«e»’

  comment [_semi cs* nl] = ‛«_semi»«cs»«nl»’
  space [s] = ‛«s»’
}
