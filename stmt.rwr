% rewrite stmt {
  program [sexp+] = ‛«sexp»’
  topsexp [x] = ‛\n«x»’
  sexp [x] = ‛«x»’

  atom_false [x] = ‛ «x»’
  atom_true [x] = ‛ «x»’
  atom_int [x] = ‛ «x»’
  atom_string [x] = ‛ «x»’
  atom_symbol [x] = ‛ «x»’

  integer [d+] = ‛«d»’
  string [lq cs* rq] = ‛«lq»«cs»«rq»’
  symbol [cs+] = ‛«cs»’
  symChar [c] = ‛«c»’
  specialChar [c] = ‛«c»’

  List_nil [lp rp] = ‛«lp»«rp»’
  List_defvar [lp _define v e rp] = ‛\n«lp»«_define» «v» «e»«rp»’
  List_defun [lp _define lp2 fname formals* rp2 body rp] = ‛\n«lp»«_define» «lp2»«fname»«formals»«rp2»«body»«rp»’
  List_cond [lp _cond clauses+ rp] = ‛«lp»«_cond»«clauses»«rp»’
  List_ifthenelse [lp _if e ethen eelse rp] = ‛«lp»«_if»«e»«ethen»«eelse»«rp»’
  List_ifthen [lp _if e ethen rp] = ‛«lp»«_if»«e»«ethen»«rp»’
  List_namedlet [lp _let sym lp2 bindings+ rp2 body rp] = ‛«lp»«_let» «sym» «lp2»«bindings»«rp2»«body»«rp»’
  List_letstar [lp _let lp2 bindings+ rp2 body rp] = ‛«lp»«_let»«lp2»«bindings»«rp2»«body»«rp»’
  List_let [lp _let lp2 bindings+ rp2 body rp] = ‛«lp»«_let»«lp2»«bindings»«rp2»«body»«rp»’
  List_quoted [q s] = ‛«q»«s»’
  List_backquoted [q s] = ‛«q»«s»’
  List_commaexpanded [_c s] = ‛«_c»«s»’
  List_dotted [lp s+ Dotted rp] = ‛«lp»«s»«Dotted»«rp»’
  List_list [lp s+ rp] = ‛«lp»«s»«rp»’

  fname [n] = ‛ «n»’
  formal [n] = ‛ «n»’
  Expr [e] = ‛«e»’

  Body [es+] = ‛«es»’
  BodyExpr [e] = ‛\n«e»’

  CondClause [lp guard e rp] = ‛\n«lp»«guard» «e»«rp»’
  Guard [e] =‛«e»’

  Binding [lp v e rp] = ‛«lp»«v»«e»«rp»’

  Then [e] = ‛\n«e»’
  Else [e] = ‛\n«e»’
  
  Dotted [_dot s] = ‛«_dot» «s»’

  comment [_semi cs* nl] = ‛«_semi»«cs»«nl»’
  space [x] = ‛«x»’
}
