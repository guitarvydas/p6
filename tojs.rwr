% rewrite tojs {
  Program [es+] = ‛«es»’
  Sexpr[e] = ‛«e»’

  Special_functionDefinition [lp _define lp2 name formals* rp2 Body rp] = ‛
function «name» («formals») {\nlet RESULT = undefined;\n«Body»
return RESULT;
}’

  Special_functionEquivalence [lp _define name name2 rp] = ‛\nlet «name» = «name2»;’
  Special_global [lp _define name BodyItem rp] = ‛\nlet «name» = listify («BodyItem»);’
  Special_cond [lp _cond CondClause+ ElseClause? rp] = ‛if (false) {\n}«CondClause»«ElseClause»’
  Special_ifThenElse [lp _if Guard ThenExpr ElseExpr rp] = ‛if («Guard») {\n«ThenExpr»\n}\nelse {\n«ElseExpr»}’
  Special_ifThen [lp _if Guard ThenExpr rp] = ‛if («Guard») {\n«ThenExpr»\n}’
  Special_and [lp _and AndBody rp] = ‛RESULT = «AndBody»’
  Special_or [lp _or OrBody rp] = ‛RESULT = «OrBody»’
  Special_letAsterisk [lp _let Bindings Body rp] = ‛«Bindings»«Body»’
  Special_letLoop [lp _let symbol NamedLetParameter Body rp] = 
    ‛function loop (⎨firstPart ‛«NamedLetParameter»’⎬) {\nlet RESULT = undefined;«Body»\nreturn RESULT;\n}\nRESULT = loop (⎨secondPart ‛«NamedLetParameter»’⎬)’
  Special_let [lp _let Bindings Body rp] = ‛«Bindings»«Body»’
  Special_quote [lp _quote e rp] = ‛"«e»"’
  Special_plus [lp _plus es+ rp] = ‛«es»’

  Sexprs_multiple [e es] = ‛(RESULT = «e»);\n«es»’
  Sexprs_single [e] = ‛(RESULT = «e»);’
  AndSexprs [es] = ‛«es»’
  OrSexprs [es] = ‛«es»’
  Formal [sym] = ‛«sym»’
  Guard [e] = ‛«e»’
  ThenExpr [e] = ‛«e»’
  ElseExpr [e] = ‛«e»’
  CondClause [lp e es rp] = ‛\nelse if («e») {\n«es»\n}’
  ElseClause [lp _else es rp] = ‛\nelse {\n«es»\n}’
  Bindings [lp Binding+ rp] = ‛«Binding»’
  Binding [lp symbol BodyItem rp] = ‛\nlet «symbol» = «BodyItem»;’
  NamedLetBindings [bs] = ‛«bs»’

  ListConstant_dotted [lb c1 _dot c2 rp] = ‛new Pair («c1», «c2»)’
  ListConstant_multiple [lb c rec rb] = ‛new Pair («c», «rec»)’
  ListConstant_single [lb c rb] = ‛new Pair («c», null)’
  ListConstant_nil [lb rb] = ‛null’

  Constant [e] = ‛«e»’
  Constants [c rec?] = ‛«c»«rec»’

  atom_nil [lp rp] = ‛null’
  atom_false [_f] = ‛false’
  atom_true [_t] = ‛true’
  atom_integerConstant [lb i rb] = ‛«i»’
  atom_stringConstant [lb s rb] = ‛«s»’
  atom_symbolConstant [lb symbol rb] = ‛"«symbol»"’
  atom_listConstant [k] = ‛«k»’
  atom_variable [s] = ‛«s»’

  integer [d+] = ‛«d»’
  string [lq cs* rq] = ‛«lq»«cs»«rq»’
  symbol [id _dot* id2*] = ‛«id»«_dot»«id2»’
  id_try [x] = ‛ftry’
  id_var [x] = ‛vvar’
  id_not [x] = ‛!’
  id_other [c cs*] = ‛«c»«cs»’
  firstLetter [c] = ‛«c»’
  followLetter [c] = ‛«c»’
  jsletter_asterisk [c] = ‛_A’
  jsletter_bang [c] = ‛_B’
  jsletter_questionMark [c] = ‛_Q’
  jsletter_dash [c] = ‛__’
  jsletter_other [c] = ‛«c»’
  special [c] = ‛«c»’
  unprintable [c] = ‛«c»’
  separator [c] = ‛«c»’

  FunctionCall [lp sym arg* rp] = ‛«sym» («arg»)’
  Arg [e] = ‛«e», ’

  comment [_semi cs* nl] = ‛«_semi»«cs»«nl»’
  space [s] = ‛«s»’
}
