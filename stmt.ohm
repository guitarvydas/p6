stmt {
 program = topsexpr+
 topsexpr = sexpr
 sexpr = applySyntactic<List> | atom

  atom =
    | "#f" -- false
    | "#t" -- true
    | integer -- int
    | string -- string
    | symbol -- symbol

  integer = digit+ &terminator
  string = "\"" (~"\"" any)* "\"" &terminator
  symbol = symChar+ &terminator
  symChar = ~terminator  any
  terminator = ";" | "#" | "(" | ")" | "'" | bq | comma | "." | space | end

  List =
    | "(" ")" -- nil
    | "(" "define" atom Expr ")" -- defvar
    | "(" "define" "(" fname formal* ")" Body ")" -- defun
    | "(" "cond" CondClause+ ")" -- cond
    | "(" "if" Expr Then Else ")" -- ifthenelse
    | "(" "if" Expr Then ")" -- ifthen
    | "(" "let*" "(" Binding+ ")" Body ")" -- letstar
    | "(" "let" symbol "(" Binding+ ")" Body ")" -- namedlet
    | "(" "let" "(" Binding+ ")" Body ")" -- let
    | "'" sexpr -- quoted
    | bq sexpr -- backquoted
    | comma sexpr -- commaexpanded
    | "(" sexpr+ Dotted ")" -- dotted
    | "(" sexpr+ ")" -- list

  fname = symbol
  formal = symbol

  Body = bodyExpr+
  bodyExpr = sexpr

  CondClause = "(" guard Body ")"
  guard = sexpr

  Binding = "(" atom Expr ")"

  Expr = #sexpr
  Then = #sexpr
  Else = #sexpr
  
  Dotted = "." #sexpr

  bq = "`"
  comma = ","

  comment = ";" (~"\n" any)* "\n"
  space += comment
}
