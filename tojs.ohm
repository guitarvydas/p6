tojs {
  Program = TopLevelSexpr+
  TopLevelSexpr =
    | Special -- special
    | ListConstant -- listConstant
    | atom -- atom
    | FunctionCall -- call
  Sexpr =
    | Special -- special
    | ListConstant -- listConstant
    | atom -- atom
    | FunctionCall -- call
  Special =
    | "(" "define" "(" symbol Formal* ")" Sexprs ")" -- functionDefinition
    | "(" "define" symbol symbol ")" -- functionEquivalence
    | "(" "define" symbol Sexpr ")" -- global
    | "(" "cond" CondClause+ ElseClause? ")" -- cond
    | "(" "if" Guard ThenExpr ElseExpr ")" -- ifThenElse
    | "(" "if" Guard ThenExpr ")" -- ifThen
    | "(" "and" AndSexprs ")" -- and
    | "(" "or" OrSexprs ")" -- or
    | "(" "let*" Bindings Sexprs ")" -- letAsterisk
    | "(" "let" "loop" NamedLetBindings Sexprs ")" -- letLoop
    | "(" "let" Bindings Sexprs ")" -- let
    | "(" "quote" Sexpr ")" -- quote
    | "(" "+" PlusSexprs ")" -- plus

  Sexprs =
    | Sexpr Sexprs -- multiple
    | Sexpr -- single
  PlusSexprs =
    | Sexpr PlusSexprs -- multiple
    | Sexpr -- single
  AndSexprs =
    | Sexpr AndSexprs -- multiple
    | Sexpr -- single
  OrSexprs =
    | Sexpr OrSexprs -- multiple
    | Sexpr -- single
  Formal = symbol
  Guard = Sexpr
  ThenExpr = Sexpr
  ElseExpr = Sexpr
  CondClause = "(" ~"else" Sexpr Sexprs ")"
  ElseClause = "(" "else" Sexprs ")"
  Bindings = "(" Binding+ ")"
  Binding = "(" symbol Sexpr ")"
  NamedLetBindings = "(" "(" symbol Sexpr ")" ")"

  ListConstant = 
    | "⎨" HeadElement TailElements "." Sexpr "⎬"  -- dottedMultiple
    | "⎨" HeadElement "." Sexpr "⎬"  -- dottedSingle
    | "⎨" HeadElement TailElements "⎬" -- multiple
    | "⎨" HeadElement "⎬" -- single
    | "⎨" "⎬"  -- nil

  HeadElement = Sexpr
  TailElements =
    | Sexpr TailElements -- multiple
    | Sexpr -- single

  atom =
    | "(" ")" -- nil
    | "#f" -- false
    | "#t" -- true
    | "‹" integer "›" -- integerConstant
    | "‹" string "›" -- stringConstant
    | "‹" symbol "›" -- symbolConstant
    | symbol -- variable

  integer = digit+
  string = "\"" (~"\"" any)* "\""
  symbol = id ("." id)*
  id =
    | "try" ~id -- try
    | "var" ~id -- var
    | "not" ~id -- not
    | firstLetter followLetter* -- other
  firstLetter = jsletter | (~separator ~unprintable any)
  followLetter = jsletter | digit | (~separator ~unprintable any)
  jsletter =
    | "*" -- asterisk
    | "!" -- bang
    | "?" -- questionMark
    | "-" -- dash
    | letter -- other
  special  = ";" | "#" | "(" | ")" | "‹" | "›" | "." | "⎨" | "⎬"
  unprintable = ("\x00" .. "\x20") | "\x7F"
  separator = space | special | end

  FunctionCall = "(" symbol Args? ")"
  Args =
    | Sexpr Args -- multiple
    | Sexpr -- single

  comment = ";" (~"\n" any)* "\n"
  space += comment
}
